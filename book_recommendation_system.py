# -*- coding: utf-8 -*-
"""book_recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18LflL9iR0Yp1TO1hF8BNgStW2HPFLQlS
"""

import pandas as pd
import numpy as np

books  = pd.read_csv('/content/data.csv')

books.head(5)

books.describe()

books.sample(4)

"""## Select Necessary Columns"""

#selection of necessory columns
books = books[['title', 'authors', 'categories', 'description']]#this command select these four columns from data frame and removes rest of
print(books.head())

"""## Handle Missing Values"""

books.dropna(inplace=True)
print(books.info())

"""## Combine Features into a Single String

Our model works on text data, so we will combine all the important information (title, author, category, and description) into a single string. This string will be our "features" for the model.
"""

# combine all text feature in a string
books['features'] = books['title']+' '+books['authors']+' '+books['categories']+' '+books['description']#this column conatin important information about every books at once
print(books['features'].head())

"""## TF-IDF Vectorizer
this convert text into a matrics where every words has it's own importance
"""

from sklearn.feature_extraction.text import TfidfVectorizer
# with the help of tf IDF we convert text into numbers
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(books['features'])

# show the shape of matrix
print('shape of the TF-IDF matrix =')
print(tfidf_matrix.shape)

"""## Calculate cosine similartiy"""

from sklearn.metrics.pairwise import cosine_similarity
# calculate the cosine similarity
cosine_sim = cosine_similarity(tfidf_matrix,tfidf_matrix)
print('shape of the cosine similarity matrix = ')
print(cosine_sim.shape)

"""## recommendation function"""

def get_recommendation(title,cosine_sim=cosine_sim,books=books):
    if title not in books['title'].values:
        print('sorry not found in the dataset.',title)
        return[]
    #find book's title's index
    book_index = books[books['title'] == title].index[0]
    #get the score of cosine similarity
    similarity_scores = list(enumerate(cosine_sim[book_index]))
    # according to the score sort the books
    similarity_scores = sorted(similarity_scores,key=lambda x:x[1],reverse=True)
    # get the first 6 books exclude itself
    top_books_indices = [i[0] for i in similarity_scores[1:6]]
    # get the data frame of recommedit books
    recommended_books = books.iloc[top_books_indices]
    return recommended_books

book_title_to_recommend = 'The Lord of the Rings'
recommendations = get_recommendation(book_title_to_recommend)
if not recommendations.empty:
    print(f"\nRecommendation for '{book_title_to_recommend}':\n")
    for index, row in recommendations.iterrows():
        print(f"- {row['title']} by {row['authors']}")
else:
    print("No recommendation found.")

